# ABSTRACT: What Pinto is, and how to use it
# PODNAME: Pinto::Manual

#------------------------------------------------------------------------------

# VERSION

#------------------------------------------------------------------------------

=head1 DESCRIPTION

This document is an overview of the L<Pinto> tool suite, and a general
guide for using L<Pinto> in the real world.  It is a work-in-progress,
so feel free to send suggestions to the author.

=head1 GOALS

Pinto has two primary goals.  First, Pinto seeks to address the
problem of instability in the CPAN mirrors.  Distribution archives are
constantly added and removed from the CPAN, so if you use it to build
a system or application, you may not get the same result twice.
Second, Pinto seeks to enable developers to use the CPAN toolchain for
building, testing, and dependency management of their own local
software, even if they never plan to release it to the CPAN.

Pinto accomplishes these goals by providing a suite of tools for
creating and managing your own custom repositories of distribution
archives.  These repositories can contain any distribution archives
you like, and can be used with the standard CPAN toolchain.

=head1 PRIOR ART

The idea of a custom repository is not new.  Randal Schwartz presented
L<the idea|http://www.stonehenge.com/merlyn/LinuxMag/col42.html> back
in 2002.  Subsequently, modules like L<CPAN::Site> and L<CPAN::Mini>
were released.  More recently, L<OrePAN> and L<MyCPAN::App::DPAN> have
emerged as well.

Over the last few years, I personally used various combinations of
those modules to create custom repositories at several organizations.
But they always required some wrapping and/or glue to make them usable
in the development cycle.  And none of them seemed to be designed for
extension.

I wanted a suite of tools that would work out-of-the-box, and would
accommodate a fairly wide range of use cases. Hence, L<Pinto> was
born.

=head1 COMPONENTS

The L<Pinto> suite consists of a core set of libraries and three
command line utilities.  Each of these utilities ships in a separate
distribution, so you don't have to install the whole kit if you're
only going to use a subset of the L<Pinto> suite.  However, you can
install L<Task::Pinto> if you'd like to get everything in one shot.

=head1 pinto-admin

L<pinto-admin> is a utility for creating and managing a Pinto
repository.  It supports the core operations of adding local
distribution archives and pulling archives from other repositories.
It also provides reports about the repository and its contents.

=head2 pinto-server

L<pinto-server> provides a web service interface to your Pinto
repository.  This allows multiple (possibly remote) developers to
manage a central repository.  L<pinto-server> also functions as the
backend server to installer clients like L<cpan>, L<cpanp>, and
L<cpanm>.

=head2 pinto-remote

L<pinto-remote> is a utility for interacting with a remote Pinto
repository (via L<pinto-server>).  It supports most of the
operations supported by L<pinto-admin>.


=head1 TERMINOLOGY

Before going any further, I should stop and spell out the terminology
that I'm going to use.

=over 4

=item  Archive

An "archive" is the file that developers ship, which contains all
their application/library code, test cases, build scripts etc.
Conversely, the archive is the file that users must fetch to install
the application/library.  Sometimes I also refer to these as
"distributions".

=item Package

A "package" is something inside a distribution archive that provides
some unit of functionality.  In Perl, packages are declared with the
C<package> keyword.  Some folks call these "modules" but I try to
avoid that term because it is overloaded.

=item Prerequisite

A "prerequisite" is a package that must be installed for the sake of
another distribution archive.  Sometimes I call these "dependencies".

=back

=head1 CONCEPTS

=over 4

=item Stack

All CPAN-like repositories have an index which maps the latest
version of each package to the archive that contains it.  But usually,
there is only one such index.  With Pinto, there can be many
indexes.  Each of


=item Pin

...

=back


=head1 PINTO BASICS

=head2 PULLING DISTRIBUTIONS FROM THE CPAN

=head2 ADDING YOUR OWN DISTRIBUTIONS

=head2 PATCHING A CPAN DISTRIBUTION

=head1 ADVANCED PINTO

=head2 CREATING STACKS

=head2 WORKING WITH STACKS

=head2 MANAGING CHANGE

=head1 PINTO AND THE DEVELOPMENT CYCLE

=head1 PINTO AND TEAMS

=head1 PINTO AND DEPLOYMENT

=head1 PINTO AND VERSION CONTROL SYSTEMS

=head1 PINTO AND OTHER PACKAGING SYSTEMS

=head1 PINTO AND OTHER CPAN TOOLS

=head1 EXTENDING PINTO

=head1 FUTURE PLANS

=cut
